모두가 다 알고 있는 CICD 한 번쯤 들어보셨죠? 아직도 모르신다면 괜찮아요. 이번 영상에서 정확하게 알아가실 수 있어요. 요즘같이 빠르게 진화하고 변화하는 시대에 어떻게 하면 시장과 고객을 요구해 빠르게 반응해서 제품을 출시, 업데이트할 것인가가 큰 과제예요. 바로 이것을 위해서 세계적으로 많은 기업들이 CICD를 개발 프로세스로 사용하고 있어요. 대부분의 회사에서 CICD 환경에서 일하고 있기 때문에 개발자시거나 소프트웨어 제품에 관련된 일을 하신다면 CICD가 정확하게 모자란 CD가 정확하게 뭔지 알아두시면 정말 좋겠죠? CRCD란 간단하게 말해서 어플리케이션 개발 단계부터 배포 때까지 이 모든 단계들을 자동화를 통해서 조금 더 효율적이고 빠르게 사용자에게 빈번히 배포할 수 있도록 만드는 것을 말해요. CI는 Continuous Integration, 지속적인 통합의 약자고요. CD는 Continuous Delivery, 지속적인 제공의 약자고요. 이 Delivery 대신에 Deployment, 배포로 사용하는 경우도 있어요. 자, 이제 하나하나씩 알아보도록 할 텐데요. 먼저 CI, Continuous Integration, 지속적인 통합은요. 버그 수정이나 새로 만드는 기능들이 메인 리파지토리에 주기적으로 빌드되고 테스트가 되어서 머지 되는 것을 말해요. 이 방식은 1991년 그래디에 의해서 처음으로 사용되어지다가 나중에는 익스트림 프로그래밍 개발 방법론에서 채택되어졌는데요. 그래디는 객체지향 프로그래밍에 관련된 아주 유명한 책을 쓴 저자예요. 이 CI는 두 가지를 포인트로 잡고 생각하시면 정말 좋은데요. 첫 번째 포인트는요. 개발자들은 그들의 코드 변경 사항을 메인 리포지토리에 주기적으로 빈번하게 머지를 해야 합니다. 동일한 소스 파일 위에서 두 명의 개발자가 서로 다른 코드를 작성하고 있다가 오랜 기간 오랜 기간 서로 변경을 하다가 나중에 머지를 하려고 하면 서로 다른 코드를 어떻게 통합해서 적용해 나갈 건지 고생을 많이 하겠죠. 이렇게 되면 새로운 기능을 개발하기 위해서 코드를 작성하는 시간보다 이 머지 충돌을 해결하기 위해서 더 많은 시간을 사용해야 할지도 몰라요. 또는 새로운 기능을 구현할 때는 더더욱 이 기능을 어떻게 작은 단위로 나누어서 내가 메인 리파지토리에 반영하거나 또는 작은 단위로 나누어서 내가 사용자에게 배포할 수 있을지 최대한 작은 단위로 나누어서 개발하고 통합해 나가는 것이 중요해요. CI의 더 중요한 두 번째 포인트는요. 주기적으로 머지된 이 코드의 변경 사항이 자동으로 빌드가 되어서 코드 변경 사항 이후에도 빌드가 성공적으로 되는지 확인이 되어야 되고요. 그리고 새로 추가된 이 코드의 변경 사항은요. 뿐만 아니라 기존의 시스템에 다른 버그를 초래하지는 않았는지 자동으로 테스트까지 되어야 합니다. 보통 개발팀에서 이런 식으로 셋업을 많이 하는데요. 메인 리파지토리가 있고 개발자들은 하루에도 몇 번씩 주기적으로 코드의 변경사항을 메인 리파지토리에 머지를 합니다. 물론 그 전에 코드 리뷰를 통해서 코드가 적절한지 확인을 받아야겠죠? 이렇게 머지가 되었으면 자동으로 팀에서 만든 CI 스크립트를 통해서 추가된 코드와 함께 이 리파지토리가 빌드가 되고 빌드가 된다면 잘 된다면 팀에서 작성한 유닛 테스트 인테그레이션 테스트 등등 여러가지 테스트들도 스크립트를 통해서 실행이 되요 이렇게 빌드 잘 되고 테스트가 잘 되어서 그린이라는 초록색 사인이 나오면 무사히 통과가 되어서 나중에 배포할 때 반영이 될 수 있구요 새로 추가된 코드에 문제가 있어서 빌드가 실패하거나 또는 빌드는 성공했는데 테스트에서 실패한다면 빨간색 레드 사인이 뜨면서 문제를 일으킨 개발자에게 자동으로 알려줍니다 a 개발자님 방금 뭐지 한 코드에 빨간불이 떴으면 빨리 확인해 보세요 라고요 이렇게 cia 원칙을 따라갔을 때 장점들은 어떤 것들이 있을까요 네 그렇습니다 주기적으로 머지를 하기 때문에 머지 충돌을 피할 수 있어서 개발의 생산성을 더 높일 수 있고요 그리고 머지 되는 모든 코드들은 자동으로 빌드 되고 테스트 되기 때문에 코드의 결함이나 문제점이 빠르게 발견될 수 있다는 장점이 있어요 그리고 이렇게 발생되는 결함은 빠르게 수정이 가능하다는 장점이 있습니다 왜냐 주기적으로 머시를 하기 위해서 코드의 변경 사항이 작기 때문에 문제 문제를 수정할 때도 조금 더 고립된 작은 단위의 문제를 확인할 수 있기 때문이죠. 그리고 마지막 최강의 장점은 바로 이런 것들을 통해서 조금 더 나은 코드의 퀄리티를 가질 수 있습니다. 왜냐하면 이렇게 CI를 잘 운영하기 위해서는 모든 개발자들이 자신이 새로 작성하는 코드에 한해서는 유닛 테스트를 꼭 포함해야 하기 때문이죠. 그래서 CI를 사용한다면 우리 프로젝트의 대부분의 소스 코드들이 자동으로 테스트가 될 수 있도록 만들기 때문에 조금 더 안정성 있는 제품들입니다. 제품을 개발해 나갈 수 있습니다. 자 이제 CI에 이어서 CD, Continuous Delivery라고도 하고요. 또는 Deployment라고도 하는데 각각 서로 연관 있고 또 함께 섞어서 사용하는 경우가 있기 때문에 비슷하다고 보시면 될 것 같아요. 지속적 제공, 지속적 배포 이 두 가지 모두 다 마지막 배포 단계에서 어떻게 하면 자동화해서 이 배포를 만들 수 있을지를 고민하는 단계인데요. 자 한번 예제로 알려드리도록 할게요. CI를 통해서 주기적으로 머지 된 코드의 변경 사항들이 자동으로 빌드가 되고 테스트가 되었다면 이제 배포하는 단계에서 배포할 즉 릴리즈 할 준비 과정을 거치구요 자 여기에서 준비된 릴리즈가 괜찮은지 정상적인지 아무런 문제가 없는지 직접 개발자나 또는 검증 팀이 검증을 한 다음에 아 이제 최종적으로 사용자에게 배포해도 되겠다 라고 결정이 되면 수동적으로 배포하는 요 단계를 컨티뉴스 딜리버리 라고 합니다 또는 릴리즈가 준비가 되자 자동으로 사용자에게 배포할 수 있도록 만들 수도 있는데요. 이렇게 모든 과정을 자동화해놓는 것을 Continuous Deployment라고 불러요. 딜리버리와 살짝 비슷하지만 최종 단계가 자동화가 되었는지 되지 않았는지에 따라서 살짝씩 달라질 수 있답니다. 이런 모든 과정들을 어떻게 자동화를 해두냐, 어떻게 스크립트를 쓰느냐, 그리고 이 자동화와 테스팅에 대해서 얼마나 자신감이 있느냐에 따라서 어떤 회사들은 최종 단계는 수동적으로 릴리즈하는 경우가 있고요. 또 어떤 회사는 이렇게 Continuous Deployment를 사용하는 경우도 있어요. 회사마다 어느 정도에 얼마만큼의 자동화를 하냐가 달라지기 때문에 CI, CD라고 해서 모든 회사가 똑같은 프로세스를 거치는 것은 아니고요. 회사마다 팀마다 다른 방식으로 적용해서 사용할 수 있어요. 자, 앞에서 살펴본 것처럼 CI와 CD가 완벽히 분리된 것이 아니라 대부분의 회사에서 CI와 CD를 거쳐서 배포를 하기 때문에 CI, CD 이렇게 묶어서 보르곤 합니다. CI, CD 파이플라인을 한 번 더 정리해보면요. Q. 개발자가 작은 단위로 기능을 나누어서 주기적으로 메인 리파시토리에 머시를 하면 자동으로 빌드를 하고 테스트 과정을 거쳐서 릴리즈 준비를 하고요. 여기서 수동적으로 또는 자동으로 최종 배포를 거치게 됩니다. CRCD를 위한 다양한 툴들이 있는데요. Jenkins, Billkite는 정말 제가 많이 사용했던 툴들이고요. GitHub Action도 요즘에 많이 사용되고 있고요. 그리고 다양한 툴들이 있습니다. 회사마다 Jenkins를 사용하거나 Billkite를 사용하거나 저마다 다른 툴을 사용하고 있기 때문에 회사에서만 사용할 수 있는 툴이거든요. 들어가시면 어떤 툴을 사용하시는지 알아보시고 그 툴에 대해서 정확하게 알아보고 공부하면 정말 좋겠죠 여기까지 crcd 에 대해서 다뤄봤습니다 여러분들은 crcd 에 대해서 들어본 적이 있으신가요 이런 crcd 환경에서 일을 하고 계신가요 어떤 환경에서 일을 하고 계신가요 어떤 툴들을 사용하고 계신지 또는 crcd 를 사용하면서 어려웠던 점들은 무엇이 있는지 다양한 내용들을 아래 코멘트에 남겨주시구요 이 영상이 여러분들에게 도움이 되었으면 좋겠구요 5분 넘었다고 저한테 뭐라기 없기 여러분 Don't forget to code your dream! Bye!